#!/bin/bash -eux
#
# auto_configure.sh setup and start a temboard-agent to manage a Postgres cluster.
#
# Run auto_configure.sh as root. You configure it like any libpq software. By
# default, the script configure an agent for the running cluster on port 5432,
# using postgres UNIX and PostgreSQL user.
#
# The agent is running on a port computed by reversing Postgres port. e.g. 5432
# generates 2345, 5433 generates 3345, etc.
#
# Each agent has its own user file. This file is emptied by the script.

query_pgsettings() {
	# Usage: query_pgsettings name [default]

	local name=$1; shift
	local default=${2-}
	val=$(sudo -u ${PGUSER} psql -tc "SELECT setting FROM pg_settings WHERE name = '${name}';")

	echo ${val-${default}}
}

generate_configuration() {
	# Usage: generate_configuration homedir sslcert sslkey cluster_name

	# Generates minimal configuration required to adapt default
	# configuration to this cluster.

	local home=$1; shift
	local sslcert=$1; shift
	local sslkey=$1; shift
	local instance=$1; shift

	local port=$(echo $PGPORT | rev)
	local key=$(head -c 16 /dev/urandom | xxd -ps)
	local pg_ctl=$(which pg_ctl)

	cat <<-EOF
	#
	# Configuration file generated by ${BASH_SOURCE[0]}.
	#

	[temboard]
	home = ${home}
	port = ${port}
	ssl_cert_file = ${sslcert}
	ssl_key_file = ${sslkey}
	key = ${key}

	[logging]
	method = stderr

	[postgresql]
	host = ${PGHOST}
	port = ${PGPORT}
	user = ${PGUSER}
	dbname = ${PGDATABASE}
	instance = ${instance}

	[administration]
	pg_ctl = '${pg_ctl} %s -D ${PGDATA}'
	EOF
}

search_bindir() {
	# Usage: search_bindir pgversion

	# Search for bin directory where pg_ctl is installed for this version.

	local pgversion=$1; shift
	for d in /usr/lib/postgresql/$pgversion /usr/pgsql-$pgversion ; do
		if [ -x $d/bin/pg_ctl ] ; then
			echo $d/bin
			return
		fi
	done
	return 1
}

setup_pq() {
	# Ensure used libpq vars are defined for configuration template.

	export PGUSER=${PGUSER-postgres}
	export PGDATABASE=${PGDATABASE-${PGUSER}}
	export PGPORT=${PGPORT-5432}
	export PGHOST=${PGHOST-$(query_pgsettings unix_socket_directories)}
	export PGDATA=$(query_pgsettings data_directory)

	sudo -u ${PGUSER} psql -tc "SELECT 'Postgres connection working.';"
}

cd $(readlink -m ${BASH_SOURCE[0]}/..)

ETCDIR=${ETCDIR-/etc/temboard-agent}
VARDIR=${VARDIR-/var/lib/temboard-agent}
LOGDIR=${LOGDIR-/var/log/temboard-agent}

setup_pq

name=$(query_pgsettings cluster_name pg${PGPORT})
home=${VARDIR}/${name}
# Create directories
install -o ${PGUSER} -g ${PGUSER} -m 0750 -d \
	${ETCDIR}/${name}/temboard-agent.conf.d/ \
	${LOGDIR}/${name} ${home}

# Start with default configuration
install -o ${PGUSER} -g ${PGUSER} -m 0640 temboard-agent.conf ${ETCDIR}/${name}/
install -o ${PGUSER} -g ${PGUSER} -m 060 users ${ETCDIR}/${name}/
# By default, don't create users.
truncate -s 0 ${ETCDIR}/${name}/users

# Find pg_ctl
if ! which pg_ctl &>/dev/null ; then
	read pgversion < ${PGDATA}/PG_VERSION
	bindir=$(search_bindir $pgversion)
	export PATH=$bindir:$PATH
fi
sslcert=/etc/ssl/certs/ssl-cert-snakeoil.pem
sslkey=/etc/ssl/private/ssl-cert-snakeoil.key

# Inject autoconfiguration in dedicated file.
generate_configuration $home $sslcert $sslkey $name | tee ${ETCDIR}/${name}/temboard-agent.conf.d/auto.conf

# systemd
if [ -x /bin/systemctl ] ; then
	unit=temboard-agent@${name//\//-}
	systemctl enable $unit
	start_cmd="systemctl start $unit"
else
	start_cmd="sudo -u ${PGUSER} temboard-agent -c ${ETCDIR}/${name}/temboard-agent.conf"
fi

cat >/dev/stderr <<-EOMSG

Success. You can now start temboard--agent using:

    ${start_cmd}

EOMSG
