version: 2.1

workflows:
  version: 2
  default:
    jobs:
    - doc: {name: stage0-doc}
    - lint: {name: stage0-lint}
    - unit:
       name: stage0-unit-py<< matrix.pyversion >>
       matrix:
         parameters:
           pyversion: ["3.6", "3.5", "2.7"]
    - dist: {name: stage0-dist}
    - rpm:
        name: stage1-pkg-<< matrix.codename >>
        matrix:
          parameters:
            codename: [rockylinux8, centos7]
        requires: [stage0-dist]
    - deb:
        name: stage1-pkg-<< matrix.codename >>
        matrix:
          parameters:
            codename: [bullseye, buster, stretch]
        requires: [stage0-dist]
    - func: &func
        name: stage2-func-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires:
        - stage0-unit-py3.6
        - stage1-pkg-<< matrix.dist >>
        matrix:
          parameters:
            dist: [rockylinux8]
            pgversion: ["14", "11"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [centos7]
            pgversion: ["13", "9.6"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [bullseye]
            pgversion: ["12"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [buster]
            pgversion: ["10"]

    # Please keep agent/tests/func/Makefile run-all test matrix sync with the
    # following.
    - func-legacy:
        name: stage2-func-legacy-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires: [stage0-unit-py3.6, stage1-pkg-<< matrix.dist >>]
        matrix:
          parameters:
            dist: [centos7]
            pgversion: ["9.6", "12"]
    - func-legacy:
        name: stage2-func-legacy-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires: [stage0-unit-py3.6, stage1-pkg-<< matrix.dist >>]
        matrix:
          parameters:
            dist: [rockylinux8]
            pgversion: ["9.6", "14"]
    - func-legacy:
        name: stage2-func-legacy-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires: [stage0-unit-py3.6, stage1-pkg-<< matrix.dist >>]
        matrix:
          parameters:
            dist: [bullseye]
            pgversion: ["13"]
    - func-legacy:
        name: stage2-func-legacy-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires: [stage0-unit-py3.6, stage1-pkg-<< matrix.dist >>]
        matrix:
          parameters:
            dist: [buster]
            pgversion: ["11"]
    - func-legacy:
        name: stage2-func-legacy-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires: [stage0-unit-py3.5, stage1-pkg-<< matrix.dist >>]
        matrix:
          parameters:
            dist: [stretch]
            pgversion: ["10"]

jobs:
  dist:
    docker: [{image: python:3.6}]
    working_directory: &working_directory /workspace
    steps:
    - checkout
    - run:
        name: Build Agent & UI
        command: |
          make dist
    - store_artifacts:
        path: /workspace/agent/dist/
    - store_artifacts:
        path: /workspace/ui/dist/
    - persist_to_workspace:
        root: .
        paths:
        - agent/dist/*.tar.gz
        - agent/dist/*.whl
        - ui/dist/*.tar.gz
        - ui/dist/*.whl

  doc:
    docker: [{image: "python:3.6"}]
    working_directory: *working_directory
    steps:
    - checkout
    - run:
        name: Install mkdocs and extensions
        command: |
          pip install --upgrade --requirement docs/requirements.txt
    - run:
        name: Build documentation with mkdocs
        command: |
          mkdocs build --strict
    - store_artifacts:
        path: README.html
        destination: build/README.html

  lint:
    docker: [image: python:3.9]
    working_directory: *working_directory
    steps:
      - checkout
      - &pip-cache-restore
        restore_cache:
          keys:
            - temboard-{{ .Branch }}
            - temboard-master
      - run:
          name: Setup python environment
          command: |
            pip install --upgrade --requirement dev/requirements.txt --editable ui/
      - run:
          name: Lint Agent
          command: |
            cd agent/
            flake8 temboardagent
            python setup.py --long-description | rst2html.py --verbose --halt=warning - >/dev/null
      - run:
          name: Lint UI
          command: |
            set -x
            # See https://discuss.circleci.com/t/commit-range-environment-variable/10410
            git diff --check $(git merge-base origin/master $CIRCLE_SHA1)..$CIRCLE_SHA1
            flake8 tests/
            cd ui/
            flake8
            python setup.py --long-description | rst2html.py --verbose --halt=warning - >/dev/null
            check-manifest
      - &pip-cache-save
        save_cache:
          key: temboard-{{ .Branch }}
          paths: ["~/.cache/pip/"]

  unit:
    parameters:
      pyversion:
        description: "Python version"
        type: enum
        enum: ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9"]
    docker:
      - image: dalibo/buildpack-python:<< parameters.pyversion >>
    working_directory: *working_directory
    steps:
    - checkout
    - &pip-cache-restore
      restore_cache:
        keys:
          - temboard-{{ .Branch }}
          - temboard-master
    - run:
        name: Install UI and tooling.
        command: |
          pip<< parameters.pyversion >> install --upgrade --editable ui/ --requirement dev/requirements.txt
    - run:
        name: Install Agent.
        command: |
          if [ "2.7" = "<< parameters.pyversion >>" ] ; then  # PY2
              echo "Skipping agent for 2.7."
              exit
          fi
          pip<< parameters.pyversion >> install --upgrade --editable agent/
    - run:
        name: Agent Unit Tests
        command: |
          if ! type -p temboard-agent ; then  # PY2
              echo "Skipping uninstalled agent."
              exit
          fi
          pytest --full-trace --cov-report=xml agent/tests/unit/
    - run:
        name: UI Unit Tests
        command: |
          pytest --full-trace --cov-report=xml ui/tests/unit/
    - run:
        name: setproctitle Integration Tests
        command: |
          set -x
          cd ui/
          # Called by script
          python temboardui/toolkit/proctitle.py
          # Called by module
          python -m temboardui.toolkit.proctitle
          # Inline script
          python -c 'from temboardui.toolkit.proctitle import test_main; test_main()'
    - &pip-cache-save
      save_cache:
        key: temboard-{{ .Branch }}
        paths: ["~/.cache/pip/"]

  rpm:
    parameters:
      codename:
        description: "RHEL-clone distribution"
        type: enum
        enum: [rockylinux8, centos7]
    docker: [{image: "dalibo/buildpack-pkg:<< parameters.codename >>"}]
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - run: find agent/dist
    - run:
        name: Build Agent RPM snapshot
        command: agent/packaging/rpm/build.sh
    - store_artifacts:
        path: /workspace/agent/dist/
    - run:
        name: Build UI RPM snapshot
        command: |
          yum-builddep -y ui/packaging/rpm/temboard.spec
          ui/packaging/rpm/build.sh
    - store_artifacts:
        path: /workspace/ui/dist/
    - persist_to_workspace:
        root: .
        paths:
        - agent/dist/*.rpm
        - ui/dist/*.rpm

  deb:
    parameters:
      codename:
        description: "Debian version"
        type: enum
        enum: [bullseye, buster, stretch]
    docker: [{image: "dalibo/buildpack-pkg:<< parameters.codename >>"}]
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - run:
        name: Build Agent Debian Snapshot
        command: agent/packaging/deb/mkdeb.sh
        environment:
          DEBFULLNAME: CircleCI
          DEBEMAIL: none@example.com
    - store_artifacts:
        path: /workspace/agent/dist/
    - run:
        name: Build UI Debian Snapshot
        command: ui/packaging/deb/mkdeb.sh
        environment:
          DEBFULLNAME: CircleCI
          DEBEMAIL: none@example.com
    - store_artifacts:
        path: /workspace/ui/dist/
    - persist_to_workspace:
        root: .
        paths:
        - agent/dist/*.deb
        - ui/dist/*.deb

  func:
    parameters:
      dist:
        description: "Distribution"
        type: enum
        enum: [bullseye, buster, stretch, centos7, rockylinux8]
      pgversion:
        description: "PostgreSQL version for repository."
        type: enum
        enum: ["14", "13", "12", "11", "10", "9.6", "9.5"]
    resource_class: large
    docker:
    - image: dalibo/buildpack-postgres:<< parameters.dist >>
      environment:
        PGHOST: localhost
        PGPASSWORD: &PGPASSWORD confidentiel
        PGUSER: postgres
        SELENIUM: http://0.0.0.0:4444
    - image: postgres:<< parameters.pgversion >>-alpine
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: *PGPASSWORD
    - image: selenium/standalone-firefox
      environment:
        SCREEN_WIDTH: 1280
        SCREEN_HEIGHT: 768
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - *pip-cache-restore
    - run:
        name: Shellcheck
        command: |
          shellcheck ui/share/purge.sh ui/share/create_repository.sh ui/share/auto_configure.sh
          shellcheck ui/packaging/deb/mkdeb.sh
    - run:
        name: Install temBoard UI & agent
        command: tests/install-all
    - run:
        name: Install test dependencies
        command: pip3 install -r dev/requirements.txt
    - run:
        name: Run pytest
        command: |
          set -ux
          upstream=master  # Update when branching to v8.
          tests/pytest-ci $upstream -vvv --pg-version=<< parameters.pgversion >> tests/
    - store_artifacts:
        path: /workspace/tests/screenshots/
    - *pip-cache-save


  func-legacy:
    parameters:
      dist:
        description: "Distribution"
        type: enum
        enum: [bullseye, buster, stretch, centos7, rockylinux8]
      pgversion:
        description: "PostgreSQL version for repository."
        type: enum
        enum: ["14", "13", "12", "11", "10", "9.6", "9.5"]
      pythonbin:
        description: "UI Python Executable"
        type: enum
        enum: ["python2.7", "python2", "python3.9", "python3.5", "python3"]
        default: "python3"
    docker:
    - image: dalibo/buildpack-postgres:<< parameters.dist >>
    - image: postgres:<< parameters.pgversion >>-alpine
      environment:
        POSTGRES_USER: temboard
        POSTGRES_PASSWORD: &PGPASSWORD confidentiel
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - *pip-cache-restore
    - run:
        name: Agent Functionnal Tests
        command: agent/tests/func/run_tests_docker.sh
        environment:
          TBD_INSTALL_PKG: "1"
          TBD_PGVERSION: "<< parameters.pgversion >>"
    - store_artifacts:
        path: /tmp/tests_temboard/logs/postgresql.log
    - *pip-cache-save
    - store_artifacts:
        path: ui/temboard-func.log
